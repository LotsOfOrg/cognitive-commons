"""Core functionality for data ingestion, hashing, and quality checking."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_data.ipynb.

# %% auto 0
__all__ = ['ContentStore']

# %% ../nbs/00_data.ipynb 1
from fastcore.basics import *
from fastcore.test import *
import hashlib
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import json
import numpy as np
from datetime import datetime


# %% ../nbs/00_data.ipynb 2
class ContentStore:
    """Manages storage and retrieval of training data content"""
    def __init__(self, store_path: Path):
        self.store_path = Path(store_path)
        self.store_path.mkdir(exist_ok=True)
        self.index_file = self.store_path/'index.json'
        self._load_index()
    
    def _load_index(self):
        """Load or initialize the content index"""
        if self.index_file.exists():
            self.index = json.loads(self.index_file.read_text())
        else:
            self.index = {}
            self._save_index()
    
    def _save_index(self):
        """Save the current index to disk"""
        self.index_file.write_text(json.dumps(self.index, indent=2))
    
    def add_content(self, content: str, contributor_id: str) -> str:
        """
        Add new content to the store
        Returns: content_id (hash)
        """
        content_id = hashlib.sha256(content.encode()).hexdigest()
        if content_id in self.index:
            return content_id
        
        timestamp = datetime.now().isoformat()
        self.index[content_id] = {
            'contributor_id': contributor_id,
            'timestamp': timestamp,
            'size': len(content)
        }
        
        (self.store_path/content_id).write_text(content)
        self._save_index()
        return content_id
    
    def get_content(self, content_id: str) -> Optional[str]:
        """Retrieve content by ID"""
        if content_id not in self.index:
            return None
        return (self.store_path/content_id).read_text()

